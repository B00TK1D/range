version: '3.8'

services:
  vpn:
    image: linuxserver/wireguard:latest
    hostname: vpn
    container_name: vpn
    restart: unless-stopped
    depends_on:
      - api
    environment:
    - PEERS=${PEERS}
    - ALLOWEDIPS="10.100.0.0/15,fd10:100::/31"
    - SERVERURL=${SERVER_URL}
    - SERVERPORT=${VPN_PORT}
    - PEERDNS=${VPN_DNS}
    cap_add:
      - NET_ADMIN
    volumes:
      - ./.docker/vpn:/config
    ports:
      - "${VPN_PORT}:${VPN_PORT}/udp"
    networks:
      game:
        ipv4_address: ${VPN_GAME_IPV4}
        ipv6_address: ${VPN_GAME_IPV6}
      checker:
        ipv4_address: ${VPN_CHECKER_IPV4}
        ipv6_address: ${VPN_CHECKER_IPV6}


  api:
    build:
      context: ./.docker/api
      dockerfile: Dockerfile
    hostname: api
    container_name: api
    restart: unless-stopped
    depends_on:
      - db
      - ticker
    environment:
      - FLAG_LIFETIME=${FLAG_LIFETIME}
      - API_KEY=${API_KEY}
      - TEAM_COUNT=${TEAM_COUNT}
      - PEERS=${PEERS}
      - SERVICES=${SERVICES}
      - TEAM_TOKENS=${TEAM_TOKENS}
    volumes:
      - ./.docker/api/src:/code
      - ./.docker/vpn:/vpn
      - ./.docker/api/teamdata:/teamdata
    ports:
      - "${API_PORT}:80"
    networks:
      game:
        ipv4_address: ${API_GAME_IPV4}
        ipv6_address: ${API_GAME_IPV6}
      infra:
        ipv4_address: ${API_INFRA_IPV4}
        ipv6_address: ${API_INFRA_IPV6}

  registry:
    image: registry:latest
    hostname: registry
    container_name: registry
    restart: unless-stopped
    volumes:
      - ./.docker/registry/cache:/cache
      - ./.docker/registry/config.yml:/etc/docker/registry/config.yml
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /cache
    networks:
      game:
        ipv4_address: ${REGISTRY_GAME_IPV4}
        ipv6_address: ${REGISTRY_GAME_IPV6}
      checker:
        ipv4_address: ${REGISTRY_CHECKER_IPV4}
        ipv6_address: ${REGISTRY_CHECKER_IPV6}

  rangemaster:
    build:
      context: ./.docker/rangemaster
      dockerfile: Dockerfile
    image: alpine:latest
    hostname: rangemaster
    container_name: rangemaster
    restart: unless-stopped
    entrypoint: sleep infinity
    networks:
      game:
        ipv4_address: ${RANGEMASTER_GAME_IPV4}
        ipv6_address: ${RANGEMASTER_GAME_IPV6}
      infra:
        ipv4_address: ${RANGEMASTER_INFRA_IPV4}
        ipv6_address: ${RANGEMASTER_INFRA_IPV6}
      checker:
        ipv4_address: ${RANGEMASTER_CHECKER_IPV4}
        ipv6_address: ${RANGEMASTER_CHECKER_IPV6}

  ticker:
    build:
      context: ./.docker/ticker
      dockerfile: Dockerfile
    hostname: ticker
    container_name: ticker
    restart: unless-stopped
    environment:
      - SERVICES=${SERVICES}
      - TEAM_COUNT=${TEAM_COUNT}
      - TICK_SECONDS=${TICK_SECONDS}
      - START_TIME=${START_TIME}
      - END_TIME=${END_TIME}
      - IPV6_ENABLED=${IPV6_ENABLED}
    volumes:
      - ./.docker/ticker/src:/code
    networks:
      infra:
        ipv4_address: ${TICKER_INFRA_IPV4}
        ipv6_address: ${TICKER_INFRA_IPV6}
      checker:
        ipv4_address: ${TICKER_CHECKER_IPV4}
        ipv6_address: ${TICKER_CHECKER_IPV6}

  db:
    image: mongo:latest
    hostname: db
    container_name: db
    restart: unless-stopped
    volumes:
      - db:/data/db
    networks:
      infra:
        ipv4_address: ${DB_INFRA_IPV4}
        ipv6_address: ${DB_INFRA_IPV6}


volumes:
  db:


networks:
  game:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${GAME_SUBNET}
  infra:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${INFRA_SUBNET}
  checker:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: ${CHECKER_SUBNET}
