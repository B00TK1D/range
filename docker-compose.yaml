version: '3.8'

services:
  vpn:
    image: linuxserver/wireguard:latest
    hostname: vpn
    container_name: vpn
    restart: unless-stopped
    depends_on:
      - api
    environment:
    - PEERS=${PEERS}
    - ALLOWEDIPS="10.100.0.0/15,fd10:100::/31"
    - SERVERURL=${SERVER_URL}
    - SERVERPORT=${VPN_PORT}
    - PEERDNS=${VPN_DNS}
    cap_add:
      - NET_ADMIN
    volumes:
      - ./.docker/vpn:/config
    ports:
      - "${VPN_PORT}:${VPN_PORT}/udp"
    networks:
      game:
        ipv4_address: 10.101.1.2
        ipv6_address: fd10:101::1:2
      checker:
        ipv4_address: 10.103.1.2
        ipv6_address: fd10:103::1:2


  api:
    build:
      context: ./.docker/api
      dockerfile: Dockerfile
    hostname: api
    container_name: api
    restart: unless-stopped
    depends_on:
      - db
      - ticker
    environment:
      - FLAG_LIFETIME=${FLAG_LIFETIME}
      - API_KEY=${API_KEY}
      - TEAM_COUNT=${TEAM_COUNT}
      - PEERS=${PEERS}
      - SERVICES=${SERVICES}
      - TEAM_TOKENS=${TEAM_TOKENS}
    volumes:
      - ./.docker/api/src:/code
      - ./.docker/vpn:/vpn
      - ./.docker/api/teamdata:/teamdata
    ports:
      - "${API_PORT}:80"
    networks:
      game:
        ipv4_address: 10.101.1.3
        ipv6_address: fd10:101::1:3
      infra:
        ipv4_address: 10.102.1.3
        ipv6_address: fd10:102::1:3

  registry:
    image: registry:latest
    hostname: registry
    container_name: registry
    restart: unless-stopped
    volumes:
      - ./.docker/registry/cache:/cache
      - ./.docker/registry/config.yml:/etc/docker/registry/config.yml
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /cache
    networks:
      game:
        ipv4_address: 10.101.1.4
        ipv6_address: fd10:101::1:4
      checker:
        ipv4_address: 10.103.1.4
        ipv6_address: fd10:103::1:4

  rangemaster:
    build:
      context: ./.docker/rangemaster
      dockerfile: Dockerfile
    image: alpine:latest
    hostname: rangemaster
    container_name: rangemaster
    restart: unless-stopped
    entrypoint: sleep infinity
    networks:
      game:
        ipv4_address: 10.101.1.6
        ipv6_address: fd10:101::1:6
      infra:
        ipv4_address: 10.102.1.6
        ipv6_address: fd10:102::1:6
      checker:
        ipv4_address: 10.103.1.6
        ipv6_address: fd10:103::1:6

  ticker:
    build:
      context: ./.docker/ticker
      dockerfile: Dockerfile
    hostname: ticker
    container_name: ticker
    restart: unless-stopped
    environment:
      - SERVICES=${SERVICES}
      - TEAM_COUNT=${TEAM_COUNT}
      - TICK_SECONDS=${TICK_SECONDS}
      - START_TIME=${START_TIME}
      - END_TIME=${END_TIME}
      - IPV6_ENABLED=${IPV6_ENABLED}
    volumes:
      - ./.docker/ticker/src:/code
    networks:
      infra:
        ipv4_address: 10.102.1.5
        ipv6_address: fd10:102::1:5
      checker:
        ipv4_address: 10.103.1.5
        ipv6_address: fd10:103::1:5

  db:
    image: mongo:latest
    hostname: db
    container_name: db
    restart: unless-stopped
    volumes:
      - db:/data/db
    networks:
      infra:
        ipv4_address: 10.102.1.4
        ipv6_address: fd10:102::1:4


volumes:
  db:


networks:
  game:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: 10.100.0.0/15
        - subnet: fd10:100::/31
  infra:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: 10.102.0.0/16
        - subnet: fd10:102::/32
  checker:
    driver: bridge
    enable_ipv6: true
    ipam:
      config:
        - subnet: 10.103.0.0/16
        - subnet: fd10:103::/32
